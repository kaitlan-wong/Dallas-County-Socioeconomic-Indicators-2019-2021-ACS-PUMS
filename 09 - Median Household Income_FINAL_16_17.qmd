---
title: "DEI ACS PUMS Data Checks - Indicator 9: Median Household Income - Final Version - 2016-2017"
author: "Kaitlan Wong"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidycensus) 
library(tidyverse) 
library(readxl) 
library(writexl) 
library(dplyr)
```

#### See <https://walker-data.com/census-r/analyzing-census-microdata.html> for guidance on using tidycensus to get ACS PUMS

#### ACS PUMS Documentation: <https://www.census.gov/programs-surveys/acs/microdata/documentation.html>

Get 2017 ACS PUMS data.

```{r}
# Get ACS data
pums17 <- get_pums(
  variables = c("AGEP", "RAC1P", "HISP", "PUMA", "HINCP","ADJINC"),
  state = "TX",
  survey = "acs1",
  year = 2017,
  recode = TRUE,
)

# View data
head(pums17)
```

Filter for Dallas PUMAs and mutate variables

```{r}
# Filter for Dallas PUMAs
data17 <- pums17 %>%
  filter(PUMA %in% c("02304", "02305", "02306", "02307", "02309", "02310", "02311", "02312", "02313", "02314", "02315", "02316", "02319", "01901", "02001"),
         # filter out negative income values
         HINCP >= 0) %>%
  # recode race/ethnicity
  mutate(race_eth = case_when(
    HISP != "01" ~ "Hispanic",
    HISP == "01" & RAC1P == "1" ~ "White, non-Hispanic",
    HISP == "01" & RAC1P == "2" ~ "Black, non-Hispanic",
    HISP == "01" & RAC1P %in% c("3","4","5") ~ "AIAN, non-Hispanic",
    HISP == "01" & RAC1P %in% c("6","7") ~ "Asian or Pacific Islander, non-Hispanic",
    HISP == "01" & RAC1P %in% c("8","9") ~ "Other, non-Hispanic",
    TRUE ~ NA_character_)
  )
     
```

Create table of counts and %s using household weight variable.

```{r}
library(matrixStats)
library(spatstat)

# convert ADJINC to numeric
data17$ADJINC <- as.numeric(data17$ADJINC)


# Calculate median income by race/ethnicity

summary17 <- data17 %>%
  group_by(race_eth) %>%
  summarize(
    median_inc = weighted.median(HINCP * ADJINC, WGTP, na.rm = TRUE)
  )

summary17

```

```{r}
# Calculate the weighted median for all people
summary_all17 <- data17 %>%
  summarize(
    median_inc = weightedMedian(HINCP * ADJINC, WGTP, na.rm = TRUE)
  )

summary_all17
```

Repeat steps for 2016 data.

```{r}
# Get ACS data
pums16 <- get_pums(
  variables = c("AGEP", "RAC1P", "HISP", "PUMA", "WKHP", "HINCP","ADJINC"),
  state = "TX",
  survey = "acs1",
  year = 2016,
  recode = TRUE,
)

# View data
head(pums16)
```

```{r}
# Filter for Dallas PUMAs
data16 <- pums16 %>%
  filter(PUMA %in% c("2304", "2305", "2306", "2307", "2309", "2310", "2311", "2312", "2313", "2314", "2315", "2316", "2319", "1901", "2001"),
         HINCP >= 0) %>%
  # recode race/ethnicity
  mutate(race_eth = case_when(
    HISP != "01" ~ "Hispanic",
    HISP == "01" & RAC1P == "1" ~ "White, non-Hispanic",
    HISP == "01" & RAC1P == "2" ~ "Black, non-Hispanic",
    HISP == "01" & RAC1P %in% c("3","4","5") ~ "AIAN, non-Hispanic",
    HISP == "01" & RAC1P %in% c("6","7") ~ "Asian or Pacific Islander, non-Hispanic",
    HISP == "01" & RAC1P %in% c("8","9") ~ "Other, non-Hispanic",
    TRUE ~ NA_character_)
  )

# load libraries to calculate median
library(matrixStats)
library(spatstat)

# convert ADJINC to numeric
data16$ADJINC <- as.numeric(data16$ADJINC)
data16$HINCP <- as.numeric(data16$HINCP)


# Calculate median income by race/ethnicity

summary16 <- data16 %>%
  group_by(race_eth) %>%
  summarize(
    median_inc = weighted.median(HINCP * ADJINC, WGTP, na.rm = TRUE)
  )

summary16

# Calculate the weighted median for all people (inflation-adjusted)
summary_all16 <- data16 %>%
  summarize(
    median_inc = weightedMedian(HINCP * ADJINC, WGTP)
  )

summary_all16

# For some reason, I only get results for Hispanic residents for 2016 ACS pums. I've double checked the 2016 codebook and the variable class, so not sure why I'm unable to get complete race data. For our checking purposes and time constraints, not super important right now. Just flagging. This has happened to other indicators for me, just for 2016.
```

Export tables to Excel.

```{r}
# Export tables to Excel

write_xlsx(list("2017" = summary17, "2016" = summary16), "09_Median Household Income_16_17.xlsx")
```
